buildscript {
    repositories {
        mavenCentral()
        maven {
            name "central snapshots"
            url "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }

    dependencies {
        classpath group: 'com.techshroom', name: 'Aversion', version: '3.0.1'
    }
}
plugins {
    id "com.google.protobuf" version "0.8.3"
    id "com.github.hierynomus.license" version "0.14.0"
    id 'net.researchgate.release' version '2.6.0'
    id "com.github.johnrengelman.shadow" version "2.0.2"
}

apply plugin: 'aversion-apt'
apply plugin: 'aversion-util'

util {
    javaVersion = '1.8'
}

configurations.all {
    resolutionStrategy {
        cacheChangingModulesFor 0, 'seconds'
    }
}

repositories {
    mavenCentral()
    maven {
        name "central snapshots"
        url "https://oss.sonatype.org/content/repositories/snapshots/"
    }
}

dependencies {
    compile group: 'com.techshroom', name: 'jsr305-plus', version: '0.0.1'
    compile group: 'com.google.protobuf', name: 'protobuf-java', version: rootProject.protobufVersion

    testCompile group: 'junit', name: 'junit', version: '4.12'
}

protobuf {
    protoc {
        artifact = 'com.google.protobuf:protoc:' + rootProject.protobufVersion
    }
}

javadoc {
    options.addStringOption('Xdoclint:none', '-quiet')
}

configure([compileJava, compileTestJava]) {
    options.compilerArgs += ['-Xlint:all', '-Xlint:-path']
    options.deprecation = true
    options.encoding = 'UTF-8'
    options.incremental = true
    options.fork = true
}

license {
    ext {
        name = project.name
        organization = project.organization
        url = project.url
    }
    header = rootProject.file('HEADER.txt')
    ignoreFailures = false
    strictCheck = true
    include 'src/**/*.java'
    mapping {
        java = 'SLASHSTAR_STYLE'
    }
}

// hack in generate files for eclipse
eclipse.classpath.file {
    withXml {
        def node = it.asNode()
        def attrNode = node.appendNode('classpathentry', ['kind': 'src', 'path': 'build/generated/source/proto/main/java'])
            .appendNode('attributes');
        attrNode.appendNode('attribute', ['name': 'ignore_optional_problems', 'value': 'true']);
        attrNode.appendNode('attribute', ['name': 'optional', 'value': 'true']);
    }
}
// hack in generate files for idea
apply plugin: 'idea'
def protoGenerated = new File(project.buildDir, 'generated/source/proto/main/java')
sourceSets.main.java.srcDir protoGenerated
idea.module.generatedSourceDirs += protoGenerated

import java.util.jar.Attributes.Name

jar {
    manifest {
        def map = new HashMap<String, String>()
        map.put(Name.IMPLEMENTATION_VERSION.toString(), project.version as String)
        attributes.putAll(map)
    }
}
