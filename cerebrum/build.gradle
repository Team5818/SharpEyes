buildscript {
    repositories {
        mavenCentral()
        maven {
            name "central snapshots"
            url "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }

    dependencies {
        classpath group: 'com.techshroom', name: 'Aversion', version: '3.0.1'
    }
}
plugins {
    id "com.google.protobuf" version "0.8.3"
    id "com.github.hierynomus.license" version "0.14.0"
    id 'net.researchgate.release' version '2.6.0'
    id "com.github.johnrengelman.shadow" version "2.0.2"
}

// from release-files
apply plugin: 'edu.sc.seis.launch4j'
apply plugin: 'application'

apply plugin: 'aversion-apt'
apply plugin: 'aversion-util'

mainClassName = 'org.rivierarobotics.sharpeyes.SharpEyes'

util {
    javaVersion = '1.8'
    extraContainers.add('org.eclipse.fx.ide.jdt.core.JAVAFX_CONTAINER')
}

eclipse.project {
    natures 'org.eclipse.xtext.ui.shared.xtextNature'
    buildCommand 'org.eclipse.xtext.ui.shared.xtextBuilder'
}

def guavaVersion = '23.6-jre'
def slf4jVersion = '1.7.25'
def nfcVersion = '1.0-M7'

configurations.all {
    resolutionStrategy {
        failOnVersionConflict();
        force 'com.google.guava:guava:' + guavaVersion
        force 'com.google.code.findbugs:jsr305:3.0.1'
        force 'org.slf4j:slf4j-api:' + slf4jVersion
        cacheChangingModulesFor 0, 'seconds'
    }
}

repositories {
    mavenCentral()
    maven {
        name "central snapshots"
        url "https://oss.sonatype.org/content/repositories/snapshots/"
    }
}

dependencies {
    compile group: 'org.slf4j', name: 'slf4j-api', version: slf4jVersion
    compile group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.3'
    compile group: 'ch.qos.logback', name: 'logback-core', version: '1.2.3'
    compile group: 'org.codehaus.groovy', name: 'groovy-all', version: '2.4.10'
    compile group: 'org.bytedeco', name: 'javacv-platform', version: '1.4'
    compile group: 'org.nfctools', name: 'nfctools-core', version: nfcVersion
    compile group: 'org.nfctools', name: 'nfctools-p2p', version: nfcVersion
    compile 'io.github.jnasmartcardio:jnasmartcardio:0.2.7'
    // protobuf-java included via common
    compile group: 'com.google.protobuf', name: 'protobuf-java-util', version: rootProject.protobufVersion
    compile project(':common')
    compileOnly group: 'com.techshroom', name: 'jsr305-plus', version: '0.0.1'

    compile group: 'com.google.guava', name: 'guava', version: guavaVersion
    addAPTReqWComp group: 'com.google.guava', name: 'guava', version: guavaVersion
    addAPT group: 'com.google.auto.service', name: 'auto-service', version: '1.0-rc3'
    addAPT group: 'com.google.auto.value', name: 'auto-value', version: '1.5.3'
    addAPTReq name: 'aopalliance'
    addAPTReq name: 'asm'
    addAPTReq name: 'auto-value'
    addAPTReq name: 'auto-common'
    addAPTReq name: 'cglib'
    addAPTReq name: 'commons-collections'
    addAPTReq name: 'commons-lang'
    addAPTReq name: 'dagger'
    addAPTReq name: 'javawriter'
    addAPTReq name: 'javax.inject'
    addAPTReq name: 'velocity'

    testCompile group: 'junit', name: 'junit', version: '4.12'
}

protobuf {
    protoc {
        artifact = 'com.google.protobuf:protoc:' + rootProject.protobufVersion
    }
}

javadoc {
    options.addStringOption('Xdoclint:none', '-quiet')
}

configure([compileJava, compileTestJava]) {
    options.compilerArgs += ['-Xlint:all', '-Xlint:-path']
    options.deprecation = true
    options.encoding = 'UTF-8'
    options.incremental = true
    options.fork = true
}

license {
    ext {
        name = project.name
        organization = project.organization
        url = project.url
    }
    header = rootProject.file('HEADER.txt')
    ignoreFailures = false
    strictCheck = true
    include 'src/**/*.java'
    mapping {
        java = 'SLASHSTAR_STYLE'
    }
}

import org.gradle.plugins.ide.eclipse.model.AccessRule;

// hack in generate files for eclipse
eclipse.classpath.file {
    withXml {
        Node node = it.asNode()
        def attrNode = ((Node) node.breadthFirst()
                .find { Node n -> n.name() == 'classpathentry' && n.attribute('path') == 'build/generated/source/proto/main/java' })
                .get('attributes').find()
        attrNode.appendNode('attribute', ['name': 'ignore_optional_problems', 'value': 'true']);
        attrNode.appendNode('attribute', ['name': 'optional', 'value': 'true']);
    }
    whenMerged {
        def jre = entries.find { it.path.contains 'org.eclipse.jdt.launching.JRE_CONTAINER' }
        jre.accessRules.add(new AccessRule('accessible', 'javax/smartcardio/**'))
    }
}

def aptGen = new File(project.buildDir, 'generated/source/apt/main/java')
def protoGen = new File(project.buildDir, 'generated/source/proto/main/java')
sourceSets.main.java.srcDirs aptGen, protoGen
apply plugin: 'idea'
idea.module.generatedSourceDirs += [aptGen, protoGen]

import java.util.jar.Attributes.Name

jar {
    manifest {
        def map = new HashMap<String, String>()
        map.put(Name.MAIN_CLASS.toString(), project.property('mainClassName') as String)
        map.put(Name.IMPLEMENTATION_VERSION.toString(), project.version as String)
        attributes.putAll(map)
    }
}

apply plugin: me.kenzierocks.releasefiles.ReleaseFilesPlugin
